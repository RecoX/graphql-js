scalar DateTime

type Mutation {
    post(url: String!, description: String!): Link!
    signup(email: String!, password: String!, name: String!): AuthPayload
    login(email: String!, password: String!): AuthPayload
    vote(linkId: ID!): Vote!
    voteImage(imageId: ID!): VoteImage!
    
    uploadImage(
        origin: String, 
        description: String!, 
        name: String!,
        urls: [String!]!,
        category: String,
        indexingData: String
        dateoData: String
    ): Image!
}

type Subscription {
    newLink: Link
    newVote: Vote
    newImage: Image
}

type Query {
    info: String!

    feed(
        filter: String,
        skip: Int,
        first: Int,
        orderBy: LinkOrderByInput
    ): Feed!

    users(
        name: String
        skip: Int
        first: Int
        orderBy: LinkOrderByInput
    ): [User!]!

    user(
        id: ID!
    ): User!

    image(
        id: ID!
    ): Image!

    imageList(
        filter: String,
        skip: Int,
        first: Int,
        orderBy: ImageOrderByInput
    ): ImageList!
}

enum LinkOrderByInput {
    description_ASC
    description_DESC
    url_ASC
    url_DESC
    createdAt_ASC
    createdAt_DESC
    name_ASC
    name_DESC
}

enum ImageOrderByInput {
    description_ASC
    description_DESC
    uploadedBy_ASC
    uploadedBy_DESC
    name_ASC
    name_DESC
    createdAt_ASC
    createdAt_DESC
}

type Feed {
    links: [Link!]!
    count: Int!
}

type AuthPayload {
    token: String
    user: User
}

type User {
    id: ID!
    name: String!
    email: String!
    links: [Link!]!
    images: [Image!]!
}

type Users {
    users: [User!]!
}

type Link {
    id: ID!
    createdAt: DateTime!
    description: String!
    url: String!
    postedBy: User
    votes: [Vote!]!
}

type Image {
    id: ID!
    name: String!
    createdAt: DateTime!
    description: String!
    uploadedBy: User!
    origin: String
    category: String!
    votes: [VoteImage!]!
    urls: [String!]!
    indexingData: String
    dateoData: String
}

type ImageList {
    images: [Image!]!
    count: Int!
}


type VoteImage {
    id: ID!
    image: Image!
    user: User!
}

type Vote {
    id: ID!
    link: Link!
    user: User!
}
