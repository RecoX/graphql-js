scalar DateTime

type Query {
  info: String!
  feed(filter: String, skip: Int, first: Int, orderBy: LinkOrderByInput): Feed!
  
  users(
    name: String
    skip: Int
    first: Int
    orderBy: LinkOrderByInput
  ): [User!]!

  user(
    id: ID!
  ): User!

  feed2(filter: String, skip: Int, first: Int, orderBy: LinkOrderByInput): Feed!
}

enum LinkOrderByInput {
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
}

type Feed {
  links: [Link!]!
  count: Int!
}

type Mutation {
  post(url: String!, description: String!): Link!
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  vote(linkId: ID!): Vote!
}

type Subscription {
  newLink: Link
  newVote: Vote
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  links: [Link!]!
  images: [Image!]!
}

type Users {
  users: [User!]!
}

type Link {
  id: ID!
  createdAt: DateTime!
  description: String!
  url: String!
  postedBy: User
  votes: [Vote!]!
}

type Image {
  id: ID!
  createdAt: DateTime!
  description: String!
  postedBy: User
  votes: [VoteImage!]!
}

type VoteImage {
  id: ID!
  image: Image!
  user: User!
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}
